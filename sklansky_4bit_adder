module sklansky_4bit_adder(
    input  wire [3:0] A, B,
    output wire [4:0] X
);
    wire [3:0] p, g;
    wire [3:0] c;

    // Generate p and g
    prop_gen pg0 (.a(A[0]), .b(B[0]), .p(p[0]), .g(g[0])); 
    prop_gen pg1 (.a(A[1]), .b(B[1]), .p(p[1]), .g(g[1]));
    prop_gen pg2 (.a(A[2]), .b(B[2]), .p(p[2]), .g(g[2]));
    prop_gen pg3 (.a(A[3]), .b(B[3]), .p(p[3]), .g(g[3]));


    assign c[0] = g[0];     // G[0:0]


    wire g1_0;
    grey_cell gc1_0 (.g_ik(g[1]), .p_ik(p[1]), .g_kj(g[0]), .g_ij(g1_0));
    assign c[1] = g1_0;     // G[1:0]
    
    
    wire g2_0;
    grey_cell gc2_0 (.g_ik(g[2]), .p_ik(p[2]), .g_kj(g1_0), .g_ij(g2_0));
    assign c[2] = g2_0;     // G[2:0]

    
    wire g3_2, p3_2;
    black_cell bc3_2 (.g_ik(g[3]), .p_ik(p[3]), .g_kj(g[2]), .p_kj(p[2]), .g_ij(g3_2), .p_ij(p3_2));
    wire g3_0;
    grey_cell gc3_0 (.g_ik(g3_2), .p_ik(p3_2), .g_kj(g1_0), .g_ij(g3_0));
    assign c[3] = g3_0;       // G[3:0]


    // Final Sum
    assign X[0] = p[0]; // LSB
    assign X[1] = p[1] ^ c[0];
    assign X[2] = p[2] ^ c[1];
    assign X[3] = p[3] ^ c[2];
    assign X[4] = p[3] ^ c[3]; // MSB = true 5th bit of sum


endmodule
